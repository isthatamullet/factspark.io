FactSpark.io Development Manual v2.0

Project Overview

FactSpark.io is an AI-powered fact-checking platform that analyzes URLs and verifies claims using RAG (Retrieval Augmented Generation) with Google Gemini AI. This manual guides the implementation from setup through deployment.

Document References

App-Overview-v2.md: Core concepts, tech decisions, architecture
Enhanced-UI-UX-v2.md: Complete design system, colors, components
PRD-v2.md: Detailed requirements, user stories, AI implementation
Pages-v2.md: Page specifications, layouts, copy content
UX-Implementation-v2.md: Tailwind setup, component examples
Pre-Development Checklist

 GitHub repository created: factspark.io
 GitHub Codespaces environment ready
 Environment variables identified:
GEMINI_API_KEY
DATABASE_URL (Neon)
UPSTASH_VECTOR_REST_URL
UPSTASH_VECTOR_REST_TOKEN
UPSTASH_REDIS_REST_URL
UPSTASH_REDIS_REST_TOKEN
Phase 0: Project Setup (Day 1)

1. Initialize Monorepo

bash
npx create-turbo@latest factspark.io --example with-tailwind
cd factspark.io
pnpm install
2. Configure Base Dependencies

bash
# In apps/web directory
pnpm add next@latest react@latest react-dom@latest
pnpm add @t3-oss/env-nextjs zod
pnpm add -D typescript @types/react @types/node
3. Setup Environment Configuration

Create apps/web/env.ts:

TypeScript
import { createEnv } from "@t3-oss/env-nextjs"
import { z } from "zod"

export const env = createEnv({
  server: {
    GEMINI_API_KEY: z.string(),
    DATABASE_URL: z.string(),
    UPSTASH_VECTOR_REST_URL: z.string(),
    UPSTASH_VECTOR_REST_TOKEN: z.string(),
  },
  client: {
    NEXT_PUBLIC_APP_URL: z.string().url(),
  },
  runtimeEnv: {
    GEMINI_API_KEY: process.env.GEMINI_API_KEY,
    DATABASE_URL: process.env.DATABASE_URL,
    // ... etc
  },
})
4. Implement Tailwind CSS

Follow Enhanced-UI-UX-v2.md Section 5 for complete Tailwind setup with dark mode.

Phase 1: Core API & URL Submission (Days 2-3)

1. Create URL Submission UI

Reference Pages-v2.md Section 1 (Homepage) for exact specifications.

Components to build:

components/hero/hero-section.tsx
components/ui/url-input.tsx
components/ui/submit-button.tsx
2. Implement API Route

TypeScript
// app/api/check/route.ts
import { processUrlSchema } from '@/lib/schemas'
import { createJob } from '@/lib/queue'

export async function POST(request: Request) {
  // Validate input
  // Create job in queue
  // Return job ID
}
3. Setup Form Handling

Use React Hook Form with Zod validation as specified in PRD-v2.md.

Phase 2: Content Scraping (Days 4-5)

1. Integrate Scraping Service

Options per PRD-v2.md:

Playwright Cloud API (recommended)
ScrapingBee as fallback
2. Implement Scraping Logic

TypeScript
// lib/scraper/index.ts
export async function scrapeUrl(url: string) {
  // Validate URL accessibility
  // Extract main content
  // Get primary image
  // Return structured data
}
Phase 3: AI Claim Extraction (Days 6-7)

1. Setup Gemini Integration

Reference PRD-v2.md Section 6 for exact prompts and methodology.

2. Implement Claim Extraction

TypeScript
// lib/ai/claim-extraction.ts
import { CLAIM_EXTRACTION_PROMPT } from '@/lib/prompts'

export async function extractClaims(content: string) {
  // Use Gemini API
  // Parse structured response
  // Return claim array
}
Phase 4: RAG Implementation (Days 8-10)

1. Setup Vector Database

Follow App-Overview-v2.md for Upstash Vector configuration.

2. Implement Knowledge Base

Create source ingestion pipeline
Generate embeddings
Store in Upstash Vector
3. Build Verification Flow

Reference PRD-v2.md AI Implementation Guidelines for verification logic.

Phase 5: UI Development (Days 11-13)

1. Build Component Library

Follow UX-Implementation-v2.md for all component patterns.

Key components:

AnalysisCard with hover animations
ScoreIndicator with dynamic colors
ClaimBreakdown with accordion
SourceCitation with external links
2. Implement Pages

Build all pages from Pages-v2.md:

Homepage (/)
Analysis Results (/analysis/[id])
Browse Archive (/browse)
Data Analytics (/data)
About (/about)
3. Add Responsive Design

Test all breakpoints specified in Enhanced-UI-UX-v2.md Section 9.

Phase 6: Testing & Optimization (Days 14-15)

1. Testing Strategy

bash
# Unit tests
pnpm test

# E2E tests
pnpm test:e2e

# Type checking
pnpm type-check
2. Performance Optimization

Implement streaming for AI responses
Add Suspense boundaries
Optimize images with next/image
Monitor bundle size
Phase 7: Deployment (Day 16)

1. Pre-Deployment Checklist

 All environment variables configured in Vercel
 Database migrations run
 API rate limiting configured
 Error tracking (Sentry) setup
2. Deploy to Vercel

bash
# Install Vercel CLI
pnpm add -g vercel

# Deploy
vercel --prod
3. Post-Deployment

Monitor error rates
Check performance metrics
Verify all features working
Development Guidelines

Code Organization

Code
Feature-based structure:
- components/[feature]/[component].tsx
- lib/[feature]/[function].ts
- server/[feature]/[action].ts
- types/[feature].ts
State Management

Server state: React Query or tRPC
Client state: Zustand (minimal)
Form state: React Hook Form
Error Handling

TypeScript
// Use Result pattern
type Result<T, E = Error> = 
  | { success: true; data: T }
  | { success: false; error: E }
Performance Best Practices

Server Components by default
Stream large responses
Implement proper caching
Use Edge Runtime where possible
Troubleshooting

Common Issues

Codespaces storage: Use cloud services, no local DBs
API limits: Implement rate limiting and caching
Build errors: Check environment variables
Type errors: Run pnpm type-check
Quick Commands

bash
# Development
pnpm dev

# Build
pnpm build

# Clean
pnpm clean

# Reset
rm -rf node_modules .next
pnpm install
Success Criteria

 URL analysis completes in <90 seconds
 UI responsive on all devices
 Dark/light mode working
 All core features implemented
 Deployed to production
 Error rate <1%
Next Steps After MVP

Public URL submission (with rate limiting)
User accounts
Browser extension
API for third parties
Remember: Always reference the detailed documents for specific requirements. This manual provides the roadmap, but the other documents contain the complete specifications.
